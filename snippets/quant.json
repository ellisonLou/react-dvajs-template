{
    "基本页面模板": {
        "prefix": "quant default react",
        "body": [
            "import React, { Component } from 'react'",
            "import { connect } from 'dva';",
            "import { Card, Form } from 'quant-ui';",
            "import PageHeaderLayout from '@/layouts/PageHeaderLayout'",
            "class ${TM_FILENAME_BASE/(.{1})/${1:/upcase}/} extends Component {",
            "    render() {",
            "        return (",
            "            <PageHeaderLayout  >",
            "                <Card className='hover-shadow'>",
            "                    demo",
            "                </Card>",
            "            </PageHeaderLayout>)",
            "    }",
            "}",
            "export default connect(({ ${TM_DIRECTORY/(.*\\\\)//g}, loading }) => {",
            "    const { } = ${TM_DIRECTORY/(.*\\\\)//g}",
            "    return {",
            "",
            "    }",
            "})(",
            "    Form.create()(${TM_FILENAME_BASE/(.{1})/${1:/upcase}/})",
            ")"
        ],
        "description": "基本页面模板"
    },
    "基本弹出框": {
        "prefix": "quant default 基本弹出框",
        "body": [
            "import React, { Component } from 'react'",
            "import { connect } from 'dva';",
            "import { Form, MoveModal, Card, Input, Row, Col } from \"quant-ui\";",
            "import { gutter, formLayout, colLayout } from '@/utils/utils';",
            "const FormItem = Form.Item;",
            "class ${TM_FILENAME_BASE/(.{1})/${1:/upcase}/} extends Component {",
            "    componentWillReceiveProps = (nextProps) => {",
            "        if (this.props.addVisible !== nextProps.addVisible) {",
            "            this.props.form.resetFields();",
            "        }",
            "    }",
            "    //modal取消事件",
            "    onCancel = () => {",
            "        const { dispatch } = this.props;",
            "        dispatch({",
            "            type: \"${TM_DIRECTORY/(.*\\\\)//g}/save\",",
            "            payload: {",
            "                addVisible: false",
            "            }",
            "        })",
            "    }",
            "    //modal确定事件",
            "    onOk = () => {",
            "        const { dispatch, isUpdate, currentData, form: { validateFields } } = this.props;",
            "        validateFields((error, values) => {",
            "            if (!!error) return;",
            "            if (isUpdate) { //修改",
            "                dispatch({",
            "                    type: \"${TM_DIRECTORY/(.*\\\\)//g}/update\",",
            "                    payload: { ...currentData, ...values }",
            "                })",
            "            } else {          //新增",
            "                dispatch({",
            "                    type: \"${TM_DIRECTORY/(.*\\\\)//g}/add\",",
            "                    payload: values",
            "                })",
            "            }",
            "        })",
            "    }",
            "    render() {",
            "        const { loading, addVisible, form: { getFieldDecorator }, currentData, isUpdate } = this.props;",
            "        return (",
            "            <MoveModal",
            "                visible={addVisible}",
            "                title={isUpdate ? \"标题修改\" : \"标题新增\"}",
            "                onCancel={this.onCancel}",
            "                onOk={this.onOk}",
            "                maskClosable={false}",
            "                confirmLoading={loading}",
            "                width=\"50%\"",
            "            >",
            "                <Card className=\"hover-shadow\" style={{ width: '100%' }}>",
            "                    <Form >",
            "                        <Row gutter={gutter}>",
            "                            <Col {...colLayout}>",
            "                                <FormItem label={\"字段1\"}",
            "                                    {...formLayout}",
            "                                >",
            "                                    {getFieldDecorator('id', {",
            "                                        initialValue: currentData.id,",
            "                                        rules: [{ required: true, message: '请选择' }],",
            "                                    })(",
            "                                        <Input />",
            "                                    )}",
            "                                </FormItem>",
            "                            </Col>",
            "                            <Col {...colLayout}>",
            "                                <FormItem label={\"字段2\"}",
            "                                    {...formLayout}",
            "                                >",
            "                                    {getFieldDecorator('k2', {",
            "                                        initialValue: currentData.k2,",
            "                                        rules: [{ required: true, message: '请选择' }],",
            "                                    })(",
            "                                        <Input />",
            "                                    )}",
            "                                </FormItem>",
            "                            </Col>",
            "                        </Row>",
            "                    </Form>",
            "                </Card>",
            "            </MoveModal>",
            "        )",
            "    }",
            "}",
            "export default connect(({ ${TM_DIRECTORY/(.*\\\\)//g}, loading }) => {",
            "    const { addVisible, isUpdate, currentData } = ${TM_DIRECTORY/(.*\\\\)//g}",
            "    return {",
            "        addVisible: true,",
            "        isUpdate,",
            "        currentData,",
            "        loading: !!loading.effects['${TM_DIRECTORY/(.*\\\\)//g}/update'] || !!loading.effects['${TM_DIRECTORY/(.*\\\\)//g}/add']",
            "    }",
            "})(",
            "    Form.create()(${TM_FILENAME_BASE/(.{1})/${1:/upcase}/})",
            ")"
        ],
        "description": "基本弹出框"
    },
    "基本models模板": {
        "prefix": "quant default models",
        "body": [
            "import { POST } from '@/utils/request';",
            "import api from '@/services/api.js';",
            "import { message } from \"quant-ui\"",
            "export default {",
            "    namespace: '${TM_FILENAME_BASE}',",
            "    state: {",
            "",
            "    },",
            "    effects: {",
            "        $0",
            "    },",
            "    reducers: {",
            "        save(state, { payload }) {",
            "            return {",
            "                ...state, ...payload",
            "            };",
            "        },",
            "        //数据字典修改保存",
            "        saveOptions(state, { payload }) {",
            "            state.options = { ...state.options, ...payload }",
            "            return {",
            "                ...state",
            "            };",
            "        }",
            "    },",
            "    subscriptions: {",
            "",
            "    },",
            "};"
        ],
        "description": "基本models模板"
    },
    "含有增删改查服务的models模板": {
        "prefix": "quant services models",
        "body": [
            "import { POST } from \"@/utils/request\";",
            "import api from \"@/services/api.js\";",
            "import { message } from \"quant-ui\";",
            "export default {",
            "    namespace: \"${TM_FILENAME_BASE}\",",
            "    state: {",
            "",
            "    },",
            "    effects: {",
            "        //查询所有",
            "        *findAll({ payload }, { call, put }) {",
            "            const { errorCode, data } = yield call(POST, api.${TM_FILENAME_BASE}.findAll);",
            "            if (errorCode == 0) {",
            "",
            "            }",
            "        },",
            "        //条件查询",
            "        *findByQuery({ payload }, { call, put }) {",
            "            const { errorCode, data } = yield call(POST, api.${TM_FILENAME_BASE}.findByQuery, [payload]);",
            "            if (errorCode == 0) {",
            "",
            "            }",
            "        },",
            "        //更新、修改",
            "        *update({ payload }, { call, put }) {",
            "            const { errorCode, data } = yield call(POST, api.${TM_FILENAME_BASE}.update, [payload]);",
            "            if (errorCode == 0) {",
            "                message.success(\"修改成功！\");",
            "            }",
            "        },",
            "        //删除",
            "        *delete({ payload }, { call, put }) {",
            "            const { errorCode, data } = yield call(POST, api.${TM_FILENAME_BASE}.delete, [payload]);",
            "            if (errorCode == 0) {",
            "                message.success(\"删除成功！\");",
            "            }",
            "        },",
            "        //添加",
            "        *add({ payload }, { call, put }) {",
            "            const { errorCode, data } = yield call(POST, api.${TM_FILENAME_BASE}.add, [payload]);",
            "            if (errorCode == 0) {",
            "                message.success(\"添加成功！\");",
            "            }",
            "        },",
            "    },",
            "    reducers: {",
            "        save(state, { payload }) {",
            "            return {",
            "                ...state, ...payload",
            "            };",
            "        },",
            "    },",
            "    subscriptions: {",
            "",
            "    },",
            "};"
        ],
        "description": "含有增删改查服务的models模板"
    },
    "生成services下的基础api对象": {
        "prefix": "quant services api",
        "body": [
            "\"${1:namespace}\":{",
            "   findAll: basUrl + \"/service\",       //查询所有接口",
            "   findByQuery: basUrl + \"/service\",   //条件查询接口",
            "   update: basUrl + \"/service\",        //更新、修改接口",
            "   delete: basUrl + \"/service\",        //删除接口",
            "   add: basUrl + \"/service\",           //添加接口",
            "},"
        ],
        "description": "生成services下的基础api对象"
    }
}